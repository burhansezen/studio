/**
 * @fileoverview Firestore Security Rules for Auto Accessory App
 *
 * Core Philosophy:
 * This ruleset enforces a security model where all authenticated users have read access to product and transaction data,
 * but write access is completely denied to all users.
 *
 * Data Structure:
 * The database consists of two top-level collections: `/products/{productId}` and `/transactions/{transactionId}`.
 *
 * Key Security Decisions:
 * - All authenticated users can read the entire product catalog and transaction history.
 * - No users can create, update, or delete products or transactions.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants read access to all products, but restricts write access.
     * @path /products/{productId}
     * @allow (get, list): Any authenticated user can read product details.
     * @deny (create, update, delete): No user can modify product information.
     * @principle Allows open reads, denies writes.
     */
    match /products/{productId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants read access to all transactions, but restricts write access.
     * @path /transactions/{transactionId}
     * @allow (get, list): Any authenticated user can read transaction details.
     * @deny (create, update, delete): No user can modify transaction information.
     * @principle Allows open reads, denies writes.
     */
    match /transactions/{transactionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // Helper function to determine if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }
  }
}