/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on authorization and skipping schema validation.
 * All read access is public. Write access is completely disabled.
 *
 * Data Structure:
 * - /products/{productId}: Stores product information.
 * - /transactions/{transactionId}: Stores transaction records.
 *
 * Key Security Decisions:
 * - Public Read Access: All users can read all data.
 * - No Write Access: All create, update, and delete operations are denied.
 * - No Schema Validation: Data types and required fields are not validated.
 *
 * This ruleset is intended for development and testing purposes ONLY.
 * Before deploying to production, you MUST implement proper authentication, authorization,
 * and data validation rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to product data. Disallows all write access.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product data.
     * @deny (create, update, delete): No user can create, update, or delete product data.
     * @principle Public read, disabled writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to transaction data. Disallows all write access.
     * @path /transactions/{transactionId}
     * @allow (get, list): Any user can read transaction data.
     * @deny (create, update, delete): No user can create, update, or delete transaction data.
     * @principle Public read, disabled writes.
     */
    match /transactions/{transactionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}